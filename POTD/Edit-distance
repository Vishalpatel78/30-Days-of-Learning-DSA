//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
   int editDistance(string str1, string str2) {
    int m = str1.size();
    int n = str2.size();
    
    // Create a 2D array to store the minimum number of operations required
    vector<vector<int>> dp(m + 1, vector<int>(n + 1));
    
    // Fill the dp array
    for (int i = 0; i <= m; ++i) {
        for (int j = 0; j <= n; ++j) {
            // If str1 is empty, insert all characters of str2
            if (i == 0) {
                dp[i][j] = j;
            }
            // If str2 is empty, remove all characters of str1
            else if (j == 0) {
                dp[i][j] = i;
            }
            // If last characters are the same, ignore the last character
            // and recur for the remaining substring
            else if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            }
            // If last characters are different, consider all possibilities
            // and find the minimum
            else {
                dp[i][j] = 1 + min({dp[i - 1][j],       // Remove
                                    dp[i][j - 1],       // Insert
                                    dp[i - 1][j - 1]}); // Replace
            }
        }
    }
    
    // The value in dp[m][n] will be the minimum number of operations required
    return dp[m][n];
}
};

//{ Driver Code Starts.
int main() {
    int T;
    cin >> T;
    while (T--) {
        string s, t;
        cin >> s >> t;
        Solution ob;
        int ans = ob.editDistance(s, t);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends
