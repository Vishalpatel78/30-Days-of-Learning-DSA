//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
   int maxMeetings(int n, int start[], int end[]) {
    // Create a vector of pairs to store start and end times together
    vector<pair<int, int>> meetings(n);
    for (int i = 0; i < n; ++i) {
        meetings[i] = {end[i], start[i]};
    }

    // Sort meetings based on their end times
    sort(meetings.begin(), meetings.end());

    // Initialize count of meetings and the end time of the last attended meeting
    int meet = 1; // We can always attend the first meeting
    int lastEndTime = meetings[0].first;

    // Iterate through the sorted meetings
    for (int i = 1; i < n; ++i) {
        // If the start time of the current meeting is greater than the last end time
        if (meetings[i].second > lastEndTime) {
            meet++;
            lastEndTime = meetings[i].first;
        }
    }

    return meet;
}
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++)
            cin >> start[i];

        for (int i = 0; i < n; i++)
            cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(n, start, end);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends
